<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 469.34373 469" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><circle r="234.671865" cx="234.671865" cy="234.5" fill="#3faa8f" shape="circle"/><g transform="matrix(0.7,0,0,0.7,70.40189723968507,64.05311279296876)"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><path xmlns="http://www.w3.org/2000/svg" d="m464.347656 265.511719c-48.332031 57.476562-105.664062 33.328125-97.222656-63.554688 12-39.113281 4.445312-124-58.664062-175.558593l-73.777344-15.554688-73.777344 15.554688c-63.113281 51.558593-70.667969 136.445312-58.667969 175.558593 8.445313 96.882813-48.890625 121.03125-97.222656 63.554688-9.445313 43.109375 41.667969 97.332031 119.890625 48.472656 3.109375 27.527344-58.890625 40.316406-99.222656 37.859375 23.664062 45 102.332031 30.554688 139-22-.054688 56.160156-115.335938 67-115.335938 67 133.335938 63.667969 147.667969-77 185.335938-87.667969 37.664062 10.667969 52 151.335938 185.332031 87.667969 0 0-115.277344-10.835938-115.332031-67 36.664062 52.554688 115.332031 67 139 22-40.335938 2.457031-102.335938-10.332031-99.222656-37.859375 78.222656 48.859375 129.332031-5.363281 119.886718-48.472656zm0 0" fill="#13fff0" data-original="#42a5f5" class=""/><g xmlns="http://www.w3.org/2000/svg" fill="#1976d2"><path d="m192.015625 170.839844c11.78125 0 21.332031-9.550782 21.332031-21.332032 0-11.785156-9.550781-21.335937-21.332031-21.335937s-21.332031 9.550781-21.332031 21.335937c.011718 11.777344 9.554687 21.320313 21.332031 21.332032zm0 0" fill="#141414" data-original="#1976d2" class=""/><path d="m277.347656 170.839844c11.78125 0 21.335938-9.550782 21.335938-21.332032 0-11.785156-9.554688-21.335937-21.335938-21.335937s-21.332031 9.550781-21.332031 21.335937c.011719 11.777344 9.554687 21.320313 21.332031 21.332032zm0 0" fill="#141414" data-original="#1976d2" class=""/><path d="m432.578125 342.632812c-39.769531 19.8125-77.78125-30.066406-92.355469-59.230468-2.632812-5.269532-9.042968-7.40625-14.3125-4.773438-5.269531 2.636719-7.40625 9.042969-4.769531 14.3125 20.019531 40.042969 55.292969 75.542969 93.082031 75.542969 9.703125-.03125 19.261719-2.351563 27.898438-6.773437 5.269531-2.632813 7.40625-9.042969 4.769531-14.3125-2.632813-5.269532-9.042969-7.402344-14.3125-4.769532zm0 0" fill="#141414" data-original="#1976d2" class=""/><path d="m412.640625 384.714844c-53.050781 17.792968-86.582031-33.441406-109.855469-79.980469-2.632812-5.269531-9.042968-7.40625-14.3125-4.769531-5.269531 2.632812-7.402344 9.042968-4.769531 14.3125 13.875 27.75 47.75 95.5 107.417969 95.5 9.621094-.066406 19.167968-1.691406 28.269531-4.8125 5.59375-1.863282 8.613281-7.90625 6.75-13.5s-7.90625-8.613282-13.5-6.75zm0 0" fill="#141414" data-original="#1976d2" class=""/><path d="m462.058594 256.714844c-2.683594-.902344-5.617188-.699219-8.148438.566406-2.535156 1.269531-4.457031 3.492188-5.339844 6.183594-5.214843 15.738281-19.035156 27.0625-35.492187 29.082031-12.894531 1.042969-23.238281-5.9375-30.1875-19.8125-12.113281-24.226563-8.675781-44.769531-4.3125-70.769531 3.328125-17.296875 5.144531-34.847656 5.4375-52.460938 0-82.472656-66.859375-149.332031-149.332031-149.332031-82.476563 0-149.335938 66.859375-149.335938 149.332031.292969 17.613282 2.113282 35.164063 5.441406 52.460938 4.363282 26 7.800782 46.542968-4.3125 70.773437-6.9375 13.875-17.363281 20.707031-30.1875 19.8125-16.457031-2.019531-30.273437-13.34375-35.488281-29.082031-1.1875-3.640625-4.234375-6.363281-7.980469-7.136719-3.746093-.773437-7.621093.519531-10.152343 3.386719-2.53125 2.871094-3.332031 6.875-2.097657 10.5 7.921876 23.929688 29.136719 40.996094 54.207032 43.601562 21.398437 1.707032 39.980468-9.957031 50.78125-31.539062 15.230468-30.460938 10.878906-56.398438 6.273437-83.855469-3.136719-16.125-4.859375-32.496093-5.148437-48.921875 0-70.691406 57.304687-128 128-128 70.691406 0 128 57.308594 128 128-.292969 16.425782-2.015625 32.792969-5.148438 48.917969-4.601562 27.460937-8.960937 53.398437 6.273438 83.855469 10.15625 20.3125 27.144531 31.6875 47.007812 31.6875 1.25 0 2.5-.042969 3.773438-.144532 25.070312-2.609374 46.285156-19.675781 54.207031-43.605468 1.859375-5.589844-1.15625-11.628906-6.738281-13.5zm0 0" fill="#141414" data-original="#1976d2" class=""/><path d="m148.222656 292.945312c2.636719-5.269531.5-11.679687-4.769531-14.3125-5.269531-2.636718-11.679687-.5-14.3125 4.769532-14.59375 29.167968-52.730469 79.019531-92.355469 59.230468-5.269531-2.636718-11.675781-.5-14.3125 4.769532-2.632812 5.269531-.5 11.675781 4.769532 14.3125 8.640624 4.417968 18.195312 6.738281 27.898437 6.773437 37.789063-.003906 73.0625-35.503906 93.082031-75.542969zm0 0" fill="#141414" data-original="#1976d2" class=""/><path d="m185.660156 314.277344c2.636719-5.269532.5-11.679688-4.769531-14.3125-5.273437-2.636719-11.679687-.5-14.316406 4.769531-23.265625 46.542969-56.800781 97.710937-109.851563 79.980469-5.578125-1.816406-11.574218 1.207031-13.429687 6.773437-1.855469 5.5625 1.128906 11.582031 6.679687 13.476563 9.101563 3.121094 18.648438 4.746094 28.269532 4.8125 59.660156 0 93.542968-67.75 107.417968-95.5zm0 0" fill="#141414" data-original="#1976d2" class=""/><path d="m334.058594 406.046875c-29.492188-9.832031-40.710938-35.289063-51.5625-59.914063-10.242188-23.25-20.835938-47.292968-47.8125-47.292968-26.980469 0-37.574219 24.042968-47.8125 47.292968-10.855469 24.625-22.074219 50.082032-51.5625 59.914063-5.59375 1.863281-8.617188 7.910156-6.75 13.5 1.863281 5.59375 7.90625 8.617187 13.5 6.75 38.445312-12.832031 52.796875-45.394531 64.332031-71.5625 9.730469-22.0625 15.832031-34.558594 28.292969-34.558594 12.457031 0 18.558594 12.5 28.289062 34.558594 11.53125 26.167969 25.886719 58.730469 64.335938 71.5625 5.589844 1.867187 11.636718-1.15625 13.5-6.75 1.863281-5.589844-1.160156-11.636719-6.75-13.5zm0 0" fill="#141414" data-original="#1976d2" class=""/></g></g></svg>
